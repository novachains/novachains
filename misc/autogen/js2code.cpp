
#include "js2code.hpp"
#include <string>
#include <vector>
#include <sstream>
#include <fstream>
#include <iostream>

using namespace std ;

#define JS_FILE_PATH    "../../src/spt/"
#define JS_GEN_FILENAME "js_in_cpp.hpp"

#define JS_HEAD_TEXT    "// this file is automatically generated. DO NOT MODIFY IT!\n"\
                        "#include \"ossTypes.h\"\n"\
                        "#include \"ossUtil.h\"\n\n"

#define JS_TAIL_TEXT    "static INT32 evalInitScripts( engine::_sptScope * scope )\n"\
                        "{\n"\
                        "   UINT32 i = 0 ;\n"\
                        "   UINT32 len = sizeof ( jsNameArray ) / sizeof ( CHAR * ) ;\n"\
                        "   INT32 rc = SDB_OK ;\n"\
                        "   for ( ; i < len ; i++ )\n"\
                        "   {\n"\
                        "      rc = scope->eval( jsTextArray[i] , jsLenArray[i] , jsNameArray[i] ,\n"\
                        "                        1 , SPT_EVAL_FLAG_NONE, NULL ) ;\n"\
                        "      if ( rc != SDB_OK )\n"\
                        "      {\n"\
                        "         PD_LOG ( PDERROR , \"fail to eval init script: %s, rc=%d\" , jsNameArray[i] , rc ) ;\n"\
                        "         break ;\n"\
                        "      }\n"\
                        "   }\n"\
                        "   return rc ;\n"\
                        "}\n"

                       

jsCodeGen::jsCodeGen()
{
}

jsCodeGen::~jsCodeGen()
{
}

void jsCodeGen::run()
{
   const CHAR *pJsFiles[] = { "error", "help", "sdbSP" } ;
   const UINT32 jsFileNum = sizeof( pJsFiles ) / sizeof( const CHAR* ) ;
   string infilename ;
   string outfilename = JS_FILE_PATH JS_GEN_FILENAME ;

   BOOLEAN isFirstItem = TRUE ;
   UINT32 fileLen = 0 ;

   vector<UINT32> vecLen ;

   string jsNameArray ;
   string jsTextArray ;
   stringstream ssJsLenArray ;

   ofstream fout( outfilename.c_str() ) ;

   fout << JS_HEAD_TEXT ;

   for ( UINT32 i = 0 ; i < jsFileNum ; ++i )
   {
      infilename = JS_FILE_PATH ;
      infilename += pJsFiles[i] ;
      infilename += ".js" ;

      stringstream ssFileContext ;

      ssFileContext << "static CHAR "
                    << pJsFiles[i]
                    << "_js[] = {" ;

      fileLen = 0 ;
      isFirstItem = TRUE ;
      /// read file
      ifstream infile( infilename.c_str() ) ;
      CHAR ch ;
      while( infile )
      {
         if ( isFirstItem )
         {
            isFirstItem = FALSE ;
         }
         else
         {
            ssFileContext << "," ;
         }
         infile.get( ch ) ;

         ssFileContext << (unsigned short)ch ;
         ++fileLen ;
      }
      ssFileContext << "};\n\n" ;

      vecLen.push_back( fileLen ) ;
      /// write
      fout << ssFileContext.str() ;
   }

   /// generate array info
   isFirstItem = TRUE ;
   jsNameArray = "static const CHAR *jsNameArray[] = {" ;
   jsTextArray = "static const CHAR* jsTextArray[] = {" ;
   ssJsLenArray  << "static const UINT32 jsLenArray[] = {" ;
   for ( UINT32 i = 0 ; i < jsFileNum ; ++i )
   {
      if ( isFirstItem )
      {
         isFirstItem = FALSE ;
      }
      else
      {
         jsNameArray += "," ;
         jsTextArray += "," ;
         ssJsLenArray << "," ;
      }

      jsNameArray += '\"' ;
      jsNameArray += pJsFiles[i] ;
      jsNameArray += ".js" ;
      jsNameArray += '\"' ;

      jsTextArray += pJsFiles[i] ;
      jsTextArray += "_js" ;

      ssJsLenArray << vecLen[i] ;
   }
   jsNameArray += "};\n" ;
   jsTextArray += "};\n" ;
   ssJsLenArray << "};\n" ;

   /// write
   fout << jsNameArray
        << jsTextArray
        << ssJsLenArray.str() ;

   /// write tail
   fout << JS_TAIL_TEXT ;

}

