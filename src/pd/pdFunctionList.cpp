/*    Copyright (C) 2011-2018 SequoiaDB Ltd.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/* This list file is automatically generated,you shoud NOT modify this file anyway! */
#include "core.hpp"
static const CHAR *_pTraceFunctionList[] = {
    "_netEventHandler::setOpt"
,   "_netEventHandler::syncConnect"
,   "_netEventHandler::asyncRead"
,   "_netEventHandler::syncSend"
,   "_netEventHandler::_allocateBuf"
,   "_netEventHandler::_readCallback"
,   "_netFrame::~_netFrame"
,   "_netFrame::run"
,   "_netFrame::stop"
,   "_netFrame::makeStat"
,   "_netFrame::listen"
,   "_netFrame::syncConnect"
,   "_netFrame::syncConnect"
,   "_netFrame::_getHandle"
,   "_netFrame::syncSend"
,   "_netFrame::syncSend"
,   "INT32 _netFrame::syncSend"
,   "_netFrame::syncSend"
,   "_netFrame::syncSendv"
,   "_netFrame::close"
,   "_netFrame::close"
,   "_netFrame::close"
,   "_netFrame::addTimer"
,   "_netFrame::removeTimer"
,   "_netFrame::handleMsg"
,   "_netFrame::_addRoute"
,   "_netFrame::_getEvSuit"
,   "_netFrame::_asyncAccept"
,   "_netFrame::_acceptCallback"
,   "_netFrame::_erase"
,   "_netRoute::route"
,   "_netRoute::route"
,   "_netRoute::update"
,   "_netRoute::update"
,   "_netRoute::update"
,   "_netRoute::clear"
,   "_netRouteAgent::updateRoute"
,   "_netRouteAgent::updateRoute"
,   "_netRouteAgent::updateRoute"
,   "_netRouteAgent::listen"
,   "_netRouteAgent::syncSend"
,   "_netRouteAgent::syncSend"
,   "_netRouteAgent::syncSend"
,   "_netRouteAgent::syncSendv"
,   "_utilBSONHasher::hashObj"
,   "_utilBSONHasher::hashElement"
,   "_utilBSONHasher::hash"
,   "_utilCachePage::_write"
,   "_utilCachePage::read"
,   "_utilCachePage::copy"
,   "_utilCacheMgr::alloc"
,   "_utilCacheMgr::allocWholePage"
,   "_utilCacheMgr::release"
,   "_utilCacheMgr::allocBlock"
,   "_utilCacheMgr::reallocBlock"
,   "_utilCacheMgr::releaseBlock"
,   "_utilCacheMgr::_allocMem"
,   "_utilCacheMgr::canRecycle"
,   "_utilCacheMgr::recycleBlocks"
,   "_utilCacheMgr::_recycleBucket"
,   "_utilCacheBucket::lock"
,   "_utilCacheBucket::unlock"
,   "_utilCacheContext::write"
,   "_utilCacheContext::read"
,   "_utilCacheContext::submit"
,   "_utilCacheContext::_loadPage"
,   "_utilCacheMerge::write"
,   "_utilCacheMerge::sync"
,   "_utilCacheUnit::getAndLock"
,   "_utilCacheUnit::_syncPage"
,   "_utilCacheUnit::lockPageCleaner"
,   "_utilCacheUnit::unlockPageCleaner"
,   "_utilCacheUnit::canSync"
,   "_utilCacheUnit::syncPages"
,   "_utilCacheUnit::_unpinPages"
,   "_utilCacheUnit::dropDirty"
,   "_utilCacheUnit::_syncPages"
,   "_utilCacheUnit::canRecycle"
,   "_utilCacheUnit::recyclePages"
,   "_utilCacheUnit::_allocFromBucket"
,   "win32read"
,   "linenoiseSetMultiLine"
,   "isUnsupportedTerm"
,   "enableRawMode"
,   "disableRawMode"
,   "getCursorPosition"
,   "getColumns"
,   "linenoiseClearScreen"
,   "linenoiseBeep"
,   "freeCompletions"
,   "completeLine"
,   "linenoiseHistoryClear"
,   "linenoiseSetCompletionCallback"
,   "linenoiseAddCompletion"
,   "abInit"
,   "abAppend"
,   "abFree"
,   "calcHighLightPos"
,   "setDisplayAttribute"
,   "refreshSingleLine"
,   "refreshMultiLine"
,   "refreshLine"
,   "linenoiseEditInsert"
,   "linenoiseEditMoveLeft"
,   "linenoiseEditMoveRight"
,   "linenoiseEditMoveHome"
,   "linenoiseEditMoveEnd"
,   "linenoiseEditHistoryNext"
,   "linenoiseEditDelete"
,   "linenoiseEditBackspace"
,   "linenoiseEditDeletePrevWord"
,   "linenoiseEdit"
,   "linenoisePrintKeyCodes"
,   "linenoiseRaw"
,   "linenoise"
,   "linenoiseAtExit"
,   "linenoiseAtExit"
,   "linenoiseHistoryGet"
,   "linenoiseHistoryAdd"
,   "linenoiseHistorySetMaxLen"
,   "linenoiseHistorySave"
,   "linenoiseHistoryLoad"
,   "setDisplayAttribute"
,   "_linenoiseCmdBuilder::_releaseNode"
,   "_linenoiseCmdBuilder::loadCmd"
,   "_linenoiseCmdBuilder::addCmd"
,   "_linenoiseCmdBuilder::delCmd"
,   "_linenoiseCmdBuilder::_insert"
,   "_linenoiseCmdBuilder::getCompletions"
,   "_linenoiseCmdBuilder::_prefixFind"
,   "_linenoiseCmdBuilder::_getCompleteions"
,   "lineComplete"
,   "canContinueNextLine"
,   "historyClear"
,   "getNextCommand"
,   "historyInit"
,   "pdLogFileWrite"
,   "pdLog"
,   "pdAudit"
,   "ossRestoreSystemSignal"
,   "ossSignalHandlerAbort"
,   "ossFuncAddrToName"
,   "ossDumpSystemTime"
,   "ossDumpDatabaseInfo"
,   "ossDumpSystemInfo"
,   "ossMachineCode"
,   "ossDumpSigInfo"
,   "ossWalkStack"
,   "ossGetSymbolNameFromAddress"
,   "ossDumpRegistersInfo"
,   "ossDumpStackTrace"
,   "ossDumpRegistersInfo"
,   "ossDumpStackTrace"
,   "ossDumpRegistersInfo"
,   "ossDumpStackTrace"
,   "ossSymInitialize"
,   "ossWalkStackEx"
,   "ossWalkStack"
,   "ossGetSymbolNameFromAddress"
,   "_ossEnumNamedPipes"
,   "ossEnumNamedPipes"
,   "ossCreateNamedPipe"
,   "ossOpenNamedPipe"
,   "ossConnectNamedPipe"
,   "ossReadNamedPipe"
,   "ossWriteNamedPipe"
,   "ossDisconnectNamedPipe"
,   "ossCloseNamedPipe"
,   "ossNamedPipeToFd"
,   "ossCreateNamedPipe"
,   "ossOpenNamedPipe"
,   "ossReadNamedPipe"
,   "ossWriteNamedPipe"
,   "ossDeleteNamedPipe"
,   "ossNamedPipeToFd"
,   "ossCleanNamedPipeByName"
,   "ossNestedTrapHandler"
,   "ossStackTrace"
,   "ossEDUCodeTrapHandler"
,   "ossEDUExceptionFilter"
,   "ossDumpSystemTime"
,   "ossDumpDatabaseInfo"
,   "ossStackTrace"
,   "ossRegisterSignalHandle"
,   "_ossMmapFile::open"
,   "_ossMmapFile::close"
,   "_ossMmapFile::size"
,   "_ossMmapFile::map"
,   "_ossMmapFile::flushAll"
,   "_ossMmapFile::flush"
,   "_ossMmapFile::flushBlock"
,   "_ossMmapFile::unlink"
,   "ossTimestampToString"
,   "ossStringToTimestamp"
,   "ossGetCPUUsage"
,   "ossGetCPUUsage"
,   "ossSrand"
,   "ossRand"
,   "ossHexDumpLine"
,   "ossHexDumpBuffer"
,   "ossGetMemoryInfo"
,   "ossGetDiskInfo"
,   "ossGetFileDesp"
,   "ossReadlink"
,   "ossGetDiskIOStat"
,   "ossGetCPUInfo"
,   "ossGetProcMemInfo"
,   "_ossModuleHandle::init"
,   "_ossModuleHandle::unload"
,   "_ossModuleHandle::resolveAddress"
,   "_ossRWMutex::lock_r"
,   "_ossRWMutex::lock_w"
,   "_ossRWMutex::release_r"
,   "_ossRWMutex::release_w"
,   "ossOpen"
,   "ossClose"
,   "ossMkdir"
,   "ossDelete"
,   "ossFileCopy"
,   "ossAccess"
,   "ossRead"
,   "ossWrite"
,   "ossSeek"
,   "ossSeekAndRead"
,   "ossSeekAndWrite"
,   "ossFsync"
,   "ossGetPathType"
,   "ossGetFileSizeByName"
,   "ossGetFileSize"
,   "ossTruncateFile"
,   "ossExtendFile"
,   "ossGetRealPath"
,   "ossGetFSType"
,   "ossRenamePath"
,   "ossLockFile"
,   "_ossSocket::_ossSocket"
,   "_ossSocket::_ossSocket"
,   "_ossSocket::_ossSocket"
,   "ossSocket::initSocket"
,   "ossSocket::setSocketLi"
,   "ossSocket::setKeepAlive"
,   "ossSocket::bind_listen"
,   "ossSocket::send"
,   "ossSocket::isConnected"
,   "ossSocket::recv"
,   "ossSocket::connect"
,   "ossSocket::close"
,   "ossSocket::disableNagle"
,   "ossSocket::secure"
,   "ossSocket::doSSLHandshake"
,   "ossSocket::_getAddress"
,   "ossSocket::setTimeout"
,   "_ossSocket::_complete"
,   "ossMemAlloc"
,   "ossMemRealloc"
,   "ossMemFree"
,   "ossPrimitiveFileOp::Open"
,   "ossPrimitiveFileOp::Read"
,   "ossPrimitiveFileOp::Write"
,   "ossPrimitiveFileOp::fWrite"
,   "ossPrimitiveFileOp::getSize"
,   "_ossEvent::wait"
,   "_ossEvent::signal"
,   "_ossEvent::signalAll"
,   "_ossEvent::reset"
,   "ossIsProcessRunning"
,   "ossWaitChild"
,   "ossCreateList"
,   "ossExec2"
,   "ossExec"
,   "ossEnableNameChanges"
,   "ossRenameProcess"
,   "ossVerifyPID"
,   "ossResolvePath"
,   "ossWaitInterrupt"
,   "ossStartService"
,   "ossWaitForServiceToReachState"
,   "ossStopService"
,   "ossCreatePipeAndDupHandle"
,   "ossExec"
,   "ossGetEWD"
,   "ossBuildArguments"
,   "ossStartProcess"
} ;
const UINT32 _pTraceFunctionListNum = 283 ;
const UINT32 pdGetTraceFunctionListNum()
{
  return 283;
}
const CHAR *pdGetTraceFunction ( UINT64 id )
{
   UINT32 funcID = (UINT32)(id & 0xFFFFFFFF) ;
   if ( funcID >= _pTraceFunctionListNum )
      return NULL ;
   return _pTraceFunctionList[funcID] ;
}
