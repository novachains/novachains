
# Environment variables define
# OS_TYPE value: Windows, Linux, FreeBSD, or MacOS
SET( OS_TYPE "" )
# ARCH_TYPE value: 32, 64
SET( ARCH_TYPE "32" )
# X86 or X86_64
SET( X86 0 )
SET( X86_64 0 )

# Analyze OS_TYPE
MESSAGE( STATUS "" )
MESSAGE( STATUS "Operation System is: ${CMAKE_SYSTEM}" )
IF ( CMAKE_SYSTEM_NAME MATCHES "Linux" )
   SET( OS_TYPE "Linux" )
ELSEIF( CMAKE_SYSTEM_NAME MATCHES "Windows" )
   SET( OS_TYPE "Windows" )
ELSEIF( CMAKE_SYSTEM_NAME MATCHES "FreeBSD" )
   SET( OS_TYPE "FreeBSD" )
ELSEIF( CMAKE_SYSTEM_NAME MATCHES "Darwin" )
   SET( OS_TYPE "MacOS" )
ELSE()
   MESSAGE( STATUS "Other platform: ${CMAKE_SYSTEM_NAME}" )
ENDIF()

# Analyze ARCH_TYPE
IF ( CMAKE_SIZEOF_VOID_P EQUAL 8 )
   SET( ARCH_TYPE "64" )
ENDIF()

# Analyze X86 or X86_64
MESSAGE( STATUS "" )
MESSAGE( STATUS "System processor is: ${CMAKE_SYSTEM_PROCESSOR}" )
IF ( CMAKE_SYSTEM_PROCESSOR MATCHES "amd64*" OR CMAKE_SYSTEM_PROCESSOR MATCHES "AMD64*" )
   SET( X86_64 1 )
ELSEIF( CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64*" )
   SET( X86_64 1 )
ELSEIF( CMAKE_SYSTEM_PROCESSOR MATCHES "i686*" )
   SET( X86 1 )
ELSEIF( CMAKE_SYSTEM_PROCESSOR MATCHES "i386*" )
   SET( X86 1 )
ELSEIF( CMAKE_SYSTEM_PROCESSOR MATCHES "x86*" )
   SET( X86 1 )
ELSE()
   MESSAGE( FATAL_ERROR "Unspport processor" )
ENDIF()

# Debug or release
IF ( CMAKE_BUILD_TYPE MATCHES "Debug" OR NOT CMAKE_BUILD_TYPE )
   ADD_DEFINITIONS( /D_DEBUG ) # /DDEBUG: conflict with spider monkey
ELSEIF( CMAKE_BUILD_TYPE MATCHES "Release" )
#
ELSEIF( CMAKE_BUILD_TYPE MATCHES "RelWithDebInfo" )
#
ELSEIF( CMAKE_BUILD_TYPE MATCHES "MinSizeRel" )
#
ELSE()
   MESSAGE( FATAL_ERROR "Invalid build type: ${CMAKE_BUILD_TYPE}" )
ENDIF()

# Environment configuration
ADD_DEFINITIONS( /D__STDC_LIMIT_MACROS )
ADD_DEFINITIONS( /DBOOST_THREAD_HAS_CONDATTR_SET_CLOCK_MONOTONIC )

# Compile options
SET( USER_COMMON_FLAGS_OPTION "" )
SET( USER_CPPFLAGS_WARING_OPTION "" )
SET( USER_DEBUG_FLAGS_OPTION "" )
SET( USER_RELEASE_FLAGS_OPTION "" )

# C++ 11
IF ( USE_CXX11 )
   INCLUDE( CheckCXXCompilerFlag )
   CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
   CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
   IF ( COMPILER_SUPPORTS_CXX11 )
      SET( USER_COMMON_FLAGS_OPTION "-std=c++11" )
   ELSEIF( COMPILER_SUPPORTS_CXX0X )
      SET( USER_COMMON_FLAGS_OPTION "-std=c++0x" )
   ELSE()
      MESSAGE( STATUS "The compiler ${CMAKE_CXX_COMPILER} does not support C++11" )
   ENDIF()
ENDIF()

IF( WIN32 )
   FIND_PATH ( STDINT_H_PATH "stdint.h" [${STD_INCLUDE_PATH}] )
   IF ( STDINT_H_PATH )
      ADD_DEFINITIONS( -DJS_HAVE_STDINT_H )
   ENDIF()
   ADD_DEFINITIONS( -DSDB_STATIC_BUILD )
   ADD_DEFINITIONS( -DXP_WIN )
   ADD_DEFINITIONS( /D_UNICODE -DUNICODE )
   ADD_DEFINITIONS( /D_CONSOLE /D_CRT_SECURE_NO_WARNINGS /DPSAPI_VERSION=1 /D_CRT_RAND_S )
   IF( NOT USE_QUIET )
      SET( USER_COMMON_FLAGS_OPTION "${USER_COMMON_FLAGS_OPTION} /EHsc /W3 /wd4355 /wd4800 /wd4267 /wd4244 /wd4200" )
   ENDIF()
ELSE()
   SET( USER_COMMON_FLAGS_OPTION "${USER_COMMON_FLAGS_OPTION} -pipe -fno-builtin-memcmp -fPIC -fno-strict-aliasing -fcheck-new" )
   IF( NOT USE_QUIET )
	  SET( USER_COMMON_FLAGS_OPTION "${USER_COMMON_FLAGS_OPTION} -Wall -Wno-unknown-pragmas -Wno-unused-function -Wno-unused-local-typedefs -Wno-unused-result -Wno-address -Wno-write-strings" )
	  SET( USER_CPPFLAGS_WARING_OPTION "-Wnon-virtual-dtor" )
   ENDIF()
   SET( USER_DEBUG_FLAGS_OPTION "-ggdb -g -o0" )
   SET( USER_RELEASE_FLAGS_OPTION "-o3" )
ENDIF()

SET( CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${USER_COMMON_FLAGS_OPTION} ${USER_DEBUG_FLAGS_OPTION}" )
SET( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${USER_COMMON_FLAGS_OPTION} ${USER_DEBUG_FLAGS_OPTION} ${USER_CPPFLAGS_WARING_OPTION}" )
SET( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${USER_COMMON_FLAGS_OPTION} ${USER_RELEASE_FLAGS_OPTION}" )
SET( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${USER_COMMON_FLAGS_OPTION} ${USER_RELEASE_FLAGS_OPTION} ${USER_CPPFLAGS_WARING_OPTION}" )

# Change default to Debug
SET( CMAKE_C_FLAGS ${CMAKE_C_FLAGS_DEBUG} )
SET( CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_DEBUG} )
SET( CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS_DEBUG} )
SET( CMAKE_MODULE_LINKER_FLAGS ${CMAKE_MODULE_LINKER_FLAGS_DEBUG} )
SET( CMAKE_SHARED_LINK_FLAGS ${CMAKE_SHARED_LINK_FLAGS_DEBUG} )

# Show CXXFLAGS
MESSAGE( STATUS "" )
IF ( CMAKE_BUILD_TYPE MATCHES "Debug" )
   MESSAGE( STATUS "CXXFLAGS: ${CMAKE_CXX_FLAGS_DEBUG}" )
ELSEIF( CMAKE_BUILD_TYPE MATCHES "Release" )
   MESSAGE( STATUS "CXXFLAGS: ${CMAKE_C_FLAGS_RELEASE}" )
ELSE()
   MESSAGE( STATUS "CXXFLAGS: ${CMAKE_CXX_FLAGS}" )
ENDIF()

